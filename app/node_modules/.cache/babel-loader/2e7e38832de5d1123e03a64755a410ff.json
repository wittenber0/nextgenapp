{"ast":null,"code":"import _classCallCheck from \"/home/wittenber0/Desktop/mqp/nextgenapp/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wittenber0/Desktop/mqp/nextgenapp/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/wittenber0/Desktop/mqp/nextgenapp/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/wittenber0/Desktop/mqp/nextgenapp/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/wittenber0/Desktop/mqp/nextgenapp/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/wittenber0/Desktop/mqp/nextgenapp/app/src/components/FlowPage.js\";\nimport React from 'react';\nimport TableComponent from './TableComponent';\nimport PageWrapper from './PageWrapper';\nimport PolicyComponent from './PolicyComponent';\nimport DownloadLink from \"react-download-link\";\nimport phase3table from '../Data/phase3data';\nimport phase2table from '../Data/phase2data';\nimport phase1table from '../Data/phase1data';\n\nvar FlowPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FlowPage, _React$Component);\n\n  function FlowPage(props) {\n    var _this;\n\n    _classCallCheck(this, FlowPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FlowPage).call(this, props));\n\n    _this.nextPhase = function () {\n      if (_this.state.phase === 3) {\n        _this.setState({\n          done: true\n        });\n\n        return;\n      } else if (_this.state.phase === 2) {\n        _this.setState({\n          phase: _this.state.phase + 1,\n          rows: phase2table.rows,\n          data: phase2table.data\n        });\n\n        return;\n      }\n\n      _this.setState({\n        phase: _this.state.phase + 1,\n        rows: phase1table.rows,\n        data: phase1table.data\n      });\n    };\n\n    _this.submitPolicies = function (p) {\n      _this.props.logs.push(new Date().getTime() + \": Policies Created : \" + p);\n\n      _this.nextPhase();\n    };\n\n    _this.state = {\n      phase: 1,\n      rows: phase3table.rows,\n      data: phase3table.data,\n      options: true,\n      done: false\n    };\n    return _this;\n  }\n\n  _createClass(FlowPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.done) {\n        this.props.logs.push(new Date().getTime() + \": Phase \" + this.state.phase);\n        return React.createElement(PageWrapper, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"page-contents\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"page-sub-title-div\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"page-sub-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"Flow Data Phase \", this.state.phase), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"For each phase, inspect each flows listed below and decide whether or not each should be blocked from the network based on the information provided. While inspecting each network flow, vocalize the proccess that you are going through to ultimately make your decision, and inparticular indicate which piece or pieces of data led you to your conclusions.\")), React.createElement(TableComponent, {\n          rows: this.state.rows,\n          data: this.state.data,\n          logs: this.props.logs,\n          options: this.state.options,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }), React.createElement(PolicyComponent, {\n          submitPolicies: this.submitPolicies,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        })));\n      } else {\n        return React.createElement(PageWrapper, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Results\"), this.props.logs.map(function (l, i) {\n          return React.createElement(\"p\", {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, l);\n        }), React.createElement(DownloadLink, {\n          filename: \"results.txt\",\n          exportFile: function exportFile() {\n            return _this2.props.logs;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"Save\"));\n      }\n    }\n  }]);\n\n  return FlowPage;\n}(React.Component);\n\nexport default FlowPage;","map":{"version":3,"sources":["/home/wittenber0/Desktop/mqp/nextgenapp/app/src/components/FlowPage.js"],"names":["React","TableComponent","PageWrapper","PolicyComponent","DownloadLink","phase3table","phase2table","phase1table","FlowPage","props","nextPhase","state","phase","setState","done","rows","data","submitPolicies","p","logs","push","Date","getTime","options","map","l","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TableComponent from './TableComponent';\nimport PageWrapper from './PageWrapper';\nimport PolicyComponent from './PolicyComponent';\nimport DownloadLink from \"react-download-link\";\nimport phase3table from '../Data/phase3data';\nimport phase2table from '../Data/phase2data';\nimport phase1table from '../Data/phase1data';\n\nclass FlowPage extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {phase: 1, rows : phase3table.rows, data : phase3table.data, options : true, done : false};\n  }\n\n  nextPhase = () => {\n\n    if(this.state.phase === 3){\n      this.setState({done : true});\n      return;\n    }else if(this.state.phase === 2){\n      this.setState({\n        phase : this.state.phase + 1,\n        rows : phase2table.rows,\n        data : phase2table.data\n      });\n      return;\n    }\n    this.setState({\n      phase : this.state.phase + 1,\n      rows : phase1table.rows,\n      data : phase1table.data\n    });\n\n  }\n\n  submitPolicies = (p) =>{\n    this.props.logs.push((new Date()).getTime() + \": Policies Created : \"+ p );\n    this.nextPhase();\n  }\n\n  render(){\n\n    if(!this.state.done){\n      this.props.logs.push((new Date()).getTime()+\": Phase \"+this.state.phase);\n      return(\n        <PageWrapper>\n        <div className=\"page-contents\">\n          <div className=\"page-sub-title-div\">\n            <h2 className=\"page-sub-title\">Flow Data Phase {this.state.phase}</h2>\n            <p>\n            For each phase, inspect each flows listed below and decide whether or not each should be blocked from the network based on the information provided.\n            While inspecting each network flow, vocalize the proccess that you are going through to ultimately make your decision, and inparticular indicate which\n            piece or pieces of data led you to your conclusions.\n            </p>\n          </div>\n          <TableComponent rows={this.state.rows} data={this.state.data} logs={this.props.logs} options={this.state.options}/>\n          <PolicyComponent submitPolicies={this.submitPolicies}/>\n        </div>\n        </PageWrapper>\n      )\n    }else{\n      return(\n        <PageWrapper>\n          <h2>Results</h2>\n          {this.props.logs.map((l, i)=>{\n            return(<p key={i}>{l}</p>);\n          })}\n          <DownloadLink filename=\"results.txt\" exportFile={() => this.props.logs}>Save</DownloadLink>\n        </PageWrapper>\n      )\n    }\n  }\n}\n\nexport default FlowPage;\n"]},"metadata":{},"sourceType":"module"}